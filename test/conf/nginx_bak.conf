worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {
    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 0.0.0.0:7000;
        location / {
            default_type text/html;

            content_by_lua_block {
                ngx.say("HelloWorld")
            }
        }

        location = /sum {
          internal;
           content_by_lua_block {
                  local args = ngx.req.get_uri_args()
                  ngx.say(tonumber(args.a) + tonumber(args.b))
              }
          }

        location = /app/test {
          content_by_lua_block {
              local res = ngx.location.capture(
                              "/sum", {args={a=3, b=8}}
                              )
              ngx.say("status:", res.status, " response:", res.body)
            }
        }

        location = /foo {
          content_by_lua_block {
              ngx.say([[I am foo]])
          }
      }
      location = / {
          rewrite_by_lua_block {
              return ngx.redirect('/foo');
          }
      }

       location /print_param {
             content_by_lua_block {
                 local arg = ngx.req.get_uri_args()
                 for k,v in pairs(arg) do
                     ngx.say("[GET ] key:", k, " v:", v)
                 end
                ngx.req.read_body()
                local arg = ngx.req.get_post_args()
                for k,v in pairs(arg) do
                     ngx.say("[POST] key:", k, " v:", v)
                 end
      } }


      location /test {
                  content_by_lua_block {
                local mysql = require "resty.mysql"
                local db, err = mysql:new()
                if not db then
                    ngx.say("failed to instantiate mysql: ", err)
        return end
                db:set_timeout(1000) -- 1 sec
                local ok, err, errno, sqlstate = db:connect{
                    host = "192.168.56.101",
                    port = 3306,
                    database = "gptg",
                    user = "root",
                    max_packet_size = 1024 * 1024 }
                if not ok then
                    ngx.say("failed to connect: ", err, ": ", errno, " ", sqlstate)
                    return
        end
                ngx.say("connected to mysql.")
                local res, err, errno, sqlstate =
                    db:query("drop table if exists cats")
                if not res then
                    ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
                    return
        end

                res, err, errno, sqlstate =
                    db:query("create table cats "
                             .. "(id serial primary key, "
                             .. "name varchar(5))")
                if not res then
                    ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
        return end
                ngx.say("table cats created.")
                res, err, errno, sqlstate =
                    db:query("insert into cats (name) "
                             .. "values (\'Bob\'),(\'\'),(null)")
                if not res then
                    ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
        return end
                ngx.say(res.affected_rows, " rows inserted into table cats ",
                        "(last insert id: ", res.insert_id, ")")
      
        -- 再次查询，table 被删
        res, err, errno, sqlstate =
                    db:query([[select * from cats where id = 1]])
                if not res then
                    ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
        return end
                db:set_keepalive(10000, 100)
            }
        }

    }
}
